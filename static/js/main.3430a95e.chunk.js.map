{"version":3,"sources":["components/Header.js","utils/employees-api.js","components/Search.js","components/Table.js","components/Card.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Axios","get","Search","props","for","type","id","placeholder","value","onChange","filterEmp","name","Table","firstResults","headers","sortName","event","setState","sort","state","employees","slice","a","b","last","target","searchResults","filter","employee","toLowerCase","startsWith","search","first","login","email","phone","location","API","then","res","data","results","catch","err","console","log","this","map","undefined","uuid","key","city","onClick","renderTableData","Component","styles","cardStyles","marginTop","overflow","background","border","borderRadius","boxShadow","display","textAlign","Card","style","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.3430a95e.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../styles/Header.css';\r\n\r\n\r\n  function Header() {\r\n    return (\r\n      <nav className=\"navbar d-flex justify-content-center flex-column headerStyle\">\r\n        <h1 className = \"headingStyle\">Employee Directory</h1>\r\n      </nav>\r\n    );\r\n  }\r\n  \r\n\r\nexport default Header;","import Axios from 'axios';\r\n\r\nexport default{\r\n    getEmployees: function() {\r\n        return Axios.get('https://randomuser.me/api/?results=50&nat=us');\r\n    }\r\n};","import React from 'react';\r\nimport '../styles/Search.css';\r\n\r\n\r\n  function Search(props) {\r\n    return (\r\n        <div className = \"searchbar\">\r\n            <form>\r\n                <div className=\"form-group row\">\r\n                    <label for=\"searchbar\" className=\"col-sm-4 col-form-label search-label\">Search Employees</label>\r\n                    <div className=\"col-sm-8\">\r\n                    <input type=\"text\" className=\"form-control searchbox\" id=\"searchbar\" placeholder=\"Enter first or last name\" value={props.value} onChange={props.filterEmp} name=\"search\"/>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n  }\r\n\r\nexport default Search;","import React, { Component } from \"react\";\r\nimport API from \"../utils/employees-api\";\r\nimport \"../styles/Table.css\";\r\nimport Search from \"./Search.js\";\r\n\r\nexport default class Table extends Component {\r\n   constructor(props) {\r\n      super(props)\r\n         this.state = {\r\n            employees: [\r\n               {\r\n                 login: '', name: '', email: '', phone: '', location: ''\r\n               }\r\n            ],\r\n            search: '',\r\n            searchResults: [\r\n               {\r\n                  login: '', name: '', email: '', phone: '', location: ''\r\n                }\r\n            ]\r\n         }\r\n   }\r\n    firstResults = [];\r\n\r\n    headers = [\r\n       {name: 'Name <>'},\r\n       {name: 'Email'},\r\n       {name: 'Phone #'},\r\n       {name: 'Location'}\r\n   ];\r\n\r\n   componentDidMount() {\r\n      API.getEmployees().then(res => {\r\n         this.setState({ employees: res.data.results });\r\n         this.firstResults = res.data.results\r\n      })\r\n      .catch(err => console.log(err));\r\n   };\r\n\r\n   sortName = event => {\r\n      this.setState({\r\n        sort: !this.state.sort\r\n      }, () => {\r\n  \r\n        if(this.state.sort){\r\n          this.setState({\r\n            employees: this.state.employees.slice().sort((a,b)=> (a.name.last > b.name.last ? 1 : -1))\r\n          })\r\n        }\r\n        else{\r\n          this.setState({\r\n            employees: this.state.employees.slice().sort((a,b)=> (b.name.last > a.name.last ? 1 : -1))\r\n          })\r\n        }\r\n      })\r\n  };\r\n\r\n\r\n  filterEmp = event => {\r\n   const value = event.target.value;\r\n   const name = event.target.name;\r\n      this.setState({\r\n         [name] : value\r\n      }, () => {\r\n     this.setState({\r\n      searchResults: this.state.employees.filter(employee => employee.name.last.toLowerCase().startsWith(this.state.search.toLowerCase()) || employee.name.first.toLowerCase().startsWith(this.state.search.toLowerCase()))\r\n     })\r\n   })\r\n   };\r\n\r\n   renderTableData() {\r\n      if(this.state.search === '') {\r\n      return this.state.employees.map((employees) => {\r\n         const {login, name, email, phone, location} = employees\r\n            if(login.uuid !== undefined) { \r\n               return (\r\n                  <tr key = {login.uuid}>\r\n                     <td className = \"dataStyle\">{name.last}, {name.first}</td>\r\n                     <td className = \"dataStyle\">{email}</td>\r\n                     <td className = \"dataStyle\">{phone}</td>\r\n                     <td className = \"dataStyle\">{location.city + \", \" + location.state}</td>\r\n                  </tr>\r\n               )\r\n            }\r\n      }) \r\n      }\r\n      else {\r\n         return this.state.searchResults.map((employees) => {\r\n            const {login, name, email, phone, location} = employees\r\n               if(login.uuid !== undefined) { \r\n                  return (\r\n                     <tr key = {login.uuid}>\r\n                        <td className = \"dataStyle\">{name.last}, {name.first}</td>\r\n                        <td className = \"dataStyle\">{email}</td>\r\n                        <td className = \"dataStyle\">{phone}</td>\r\n                        <td className = \"dataStyle\">{location.city + \", \" + location.state}</td>\r\n                     </tr>\r\n                  )\r\n               }\r\n         }) \r\n      }\r\n   }\r\n  \r\n\r\n   render() {\r\n      return (\r\n         <div>\r\n            <Search filterEmp={this.filterEmp} value={this.state.search}/>\r\n            <table className = \"table\">\r\n               <thead>\r\n                  <tr>\r\n                     {this.headers.map(({name}) => {\r\n                        return(<th key = {name} onClick={this.sortName}>{name}</th>)\r\n                     })}\r\n                  </tr>\r\n               </thead>\r\n               <tbody>\r\n                  {this.renderTableData()}\r\n               </tbody>\r\n            </table>\r\n         </div>\r\n      )\r\n   }\r\n\r\n}\r\n","import React from \"react\";\r\nimport Table from \"./Table\";\r\n\r\nconst styles = {\r\n  cardStyles: {\r\n    marginTop: \"10%\",\r\n    overflow: \"scroll\",\r\n    background: \"#4586f5\",\r\n    border: \"solid #14171c 5px\",\r\n    borderRadius: \"10px\",\r\n    boxShadow: \"0 0 0 5px hsl(0, 0%, 50%), 0 0 0 5px hsl(0, 0%, 60%), 0 0 0 10px hsl(0, 0%, 70%), 0 0 0 15px hsl(0, 0%, 80%), 0 0 0 20px hsl(0, 0%, 90%)\",\r\n    filter: \"drop-shadow(0 0 30px black)\",\r\n    display: \"table\",\r\n    textAlign: \"center\"\r\n  }\r\n};\r\n\r\n// We use JSX curly braces to evaluate the style object on the JSX tag\r\n\r\nfunction Card() {\r\n  return (\r\n    <div className = \"container-fluid\">\r\n        <div className = \"row text-center\">\r\n            <div className = \"col-md-8 offset-md-2 col-sm-12\">\r\n                <div style={styles.cardStyles} className=\"card\">\r\n                    <div className = \"card-body\">\r\n                    <Table />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Header from './components/Header.js';\r\nimport Card from './components/Card.js';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <Card />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}